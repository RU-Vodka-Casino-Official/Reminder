import time
import argparse
try:
    from plyer import notification
    USE_SYSTEM_NOTIFICATION = True
except ImportError:
    USE_SYSTEM_NOTIFICATION = False

def remind(message: str, delay_seconds: int):
    print(f"‚è≥ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {delay_seconds} —Å–µ–∫—É–Ω–¥.")
    time.sleep(delay_seconds)
    print(f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {message}")
    
    if USE_SYSTEM_NOTIFICATION:
        notification.notify(
            title='–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
            message=message,
            timeout=10
        )

def parse_time(time_str: str) -> int:
    if time_str.endswith('m'):
        return int(time_str[:-1]) * 60
    elif time_str.endswith('s'):
        return int(time_str[:-1])
    else:
        raise ValueError("–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ '10s' –∏–ª–∏ '5m'")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞")
    parser.add_argument("time", help="–í—Ä–µ–º—è –¥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10s, 5m)")
    parser.add_argument("message", help="–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –∫–∞–≤—ã—á–∫–∞—Ö")
    args = parser.parse_args()

    try:
        delay = parse_time(args.time)
        remind(args.message, delay)
    except ValueError as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
